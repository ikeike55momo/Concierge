/**
 * PerformanceChart Component
 * 
 * Â∫óËàó„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊé®Áßª„ÇíË°®Á§∫„Åô„Çã„ÉÅ„É£„Éº„Éà„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * - ÈÅéÂéª30Êó•Èñì„ÅÆÂÆüÁ∏æ„Éá„Éº„Çø
 * - ÊòéÊó•„ÅÆ‰∫àÊ∏¨ÂÄ§
 * - „Ç§„Éô„É≥„ÉàÊó•„ÅÆ„Éû„Éº„Ç´„ÉºË°®Á§∫
 */

'use client';

import React from 'react';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ChartOptions,
} from 'chart.js';
import { Line } from 'react-chartjs-2';

// Chart.js„ÅÆÂøÖË¶Å„Å™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÁôªÈå≤
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

interface PerformanceDataPoint {
  /** Êó•‰ªòÔºàYYYY-MM-DDÂΩ¢ÂºèÔºâ */
  date: string;
  /** Á∑èÂ∑ÆÊûöÊï∞ */
  totalDifference: number | null;
  /** Âπ≥ÂùáÂ∑ÆÊûöÊï∞ */
  averageDifference: number | null;
  /** Âπ≥Âùá„Ç≤„Éº„É†Êï∞ */
  averageGames: number;
  /** „Ç§„Éô„É≥„ÉàÊÉÖÂ†±Ôºà„ÅÇ„Çå„Å∞Ôºâ */
  eventInfo?: {
    eventName: string;
    eventType: string;
  };
}

interface PerformanceChartProps {
  /** „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Éá„Éº„ÇøÈÖçÂàó */
  data: PerformanceDataPoint[];
  /** ÊòéÊó•„ÅÆ‰∫àÊ∏¨ÂÄ§ */
  tomorrowPrediction?: {
    totalDifference: number;
    averageDifference: number;
    confidence: number; // ‰ø°È†ºÂ∫¶Ôºà0-100%Ôºâ
  };
  /** „ÉÅ„É£„Éº„Éà„ÅÆÈ´ò„Åï */
  height?: number;
  /** Â∫óËàóÂêçÔºà„Çø„Ç§„Éà„É´Áî®Ôºâ */
  storeName?: string;
}

/**
 * Êó•‰ªòÊñáÂ≠óÂàó„ÇíË°®Á§∫Áî®„Å´„Éï„Ç©„Éº„Éû„ÉÉ„Éà
 * @param dateString - YYYY-MM-DDÂΩ¢Âºè„ÅÆÊó•‰ªòÊñáÂ≠óÂàó
 * @returns MM/DDÂΩ¢Âºè„ÅÆÊñáÂ≠óÂàó
 */
const formatDateForDisplay = (dateString: string): string => {
  const date = new Date(dateString);
  return `${date.getMonth() + 1}/${date.getDate()}`;
};

/**
 * Êï∞ÂÄ§„ÇíÂçÉ„ÅÆ‰ΩçÂå∫Âàá„Çä„Åß„Éï„Ç©„Éº„Éû„ÉÉ„Éà
 * @param value - Êï∞ÂÄ§
 * @returns „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊ∏à„ÅøÊñáÂ≠óÂàó
 */
const formatNumber = (value: number): string => {
  return value.toLocaleString('ja-JP');
};

const PerformanceChart: React.FC<PerformanceChartProps> = ({
  data,
  tomorrowPrediction,
  height = 300,
  storeName = 'Â∫óËàó'
}) => {
  // „ÉÅ„É£„Éº„ÉàÁî®„Éá„Éº„Çø„ÅÆÊ∫ñÂÇô
  const labels = data.map(point => formatDateForDisplay(point.date));
  const totalDiffData = data.map(point => point.totalDifference);
  const avgDiffData = data.map(point => point.averageDifference);

  // ÊòéÊó•„ÅÆ‰∫àÊ∏¨„Éá„Éº„Çø„ÇíËøΩÂä†
  if (tomorrowPrediction) {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    labels.push(formatDateForDisplay(tomorrow.toISOString().split('T')[0]));
    totalDiffData.push(tomorrowPrediction.totalDifference);
    avgDiffData.push(tomorrowPrediction.averageDifference);
  }

  // „Ç§„Éô„É≥„ÉàÊó•„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇíÂèñÂæó
  const eventIndices = data
    .map((point, index) => point.eventInfo ? index : -1)
    .filter(index => index !== -1);

  const chartData = {
    labels,
    datasets: [
      {
        label: 'Á∑èÂ∑ÆÊûöÊï∞',
        data: totalDiffData,
        borderColor: '#f97316', // pachislot-orange-500
        backgroundColor: 'rgba(249, 115, 22, 0.1)',
        borderWidth: 2,
        pointBackgroundColor: totalDiffData.map((_, index) => 
          eventIndices.includes(index) ? '#ef4444' : '#f97316'
        ),
        pointBorderColor: totalDiffData.map((_, index) => 
          eventIndices.includes(index) ? '#dc2626' : '#ea580c'
        ),
        pointRadius: totalDiffData.map((_, index) => 
          eventIndices.includes(index) ? 6 : 4
        ),
        tension: 0.1,
      },
      {
        label: 'Âπ≥ÂùáÂ∑ÆÊûöÊï∞',
        data: avgDiffData,
        borderColor: '#ef4444', // pachislot-red-500
        backgroundColor: 'rgba(239, 68, 68, 0.1)',
        borderWidth: 2,
        pointBackgroundColor: '#ef4444',
        pointBorderColor: '#dc2626',
        pointRadius: 3,
        tension: 0.1,
      }
    ],
  };

  const options: ChartOptions<'line'> = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top' as const,
        labels: {
          font: {
            size: 12,
          },
          usePointStyle: true,
        },
      },
      title: {
        display: true,
        text: `${storeName} - „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊé®Áßª`,
        font: {
          size: 16,
          weight: 'bold',
        },
        color: '#374151', // gray-700
      },
      tooltip: {
        mode: 'index',
        intersect: false,
        callbacks: {
          title: (context) => {
            const index = context[0].dataIndex;
            const isEvent = eventIndices.includes(index);
            const eventInfo = isEvent ? data[index]?.eventInfo : null;
            
            let title = `${context[0].label}`;
            if (index === data.length && tomorrowPrediction) {
              title += ' (‰∫àÊ∏¨)';
            }
            if (eventInfo) {
              title += ` üéØ ${eventInfo.eventName}`;
            }
            return title;
          },
          label: (context) => {
            const value = context.parsed.y;
            if (value === null) return '';
            
            const label = context.dataset.label || '';
            const formattedValue = formatNumber(value);
            
            if (context.dataIndex === data.length && tomorrowPrediction) {
              return `${label}: ${formattedValue} (‰ø°È†ºÂ∫¶: ${tomorrowPrediction.confidence}%)`;
            }
            
            return `${label}: ${formattedValue}`;
          },
        },
      },
    },
    scales: {
      x: {
        display: true,
        title: {
          display: true,
          text: 'Êó•‰ªò',
          font: {
            size: 12,
          },
        },
        grid: {
          display: false,
        },
      },
      y: {
        display: true,
        title: {
          display: true,
          text: 'Â∑ÆÊûöÊï∞',
          font: {
            size: 12,
          },
        },
        grid: {
          color: 'rgba(156, 163, 175, 0.2)', // gray-400 with opacity
        },
        ticks: {
          callback: function(value) {
            return formatNumber(Number(value));
          },
        },
      },
    },
    interaction: {
      mode: 'nearest',
      axis: 'x',
      intersect: false,
    },
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
      <div style={{ height: `${height}px` }}>
        <Line data={chartData} options={options} />
      </div>
      
      {/* Âá°‰æãË™¨Êòé */}
      <div className="mt-4 flex flex-wrap gap-4 text-xs text-gray-600">
        <div className="flex items-center gap-1">
          <div className="w-3 h-3 rounded-full bg-pachislot-red-500"></div>
          <span>„Ç§„Éô„É≥„ÉàÊó•</span>
        </div>
        {tomorrowPrediction && (
          <div className="flex items-center gap-1">
            <div className="w-3 h-3 rounded-full bg-gray-400"></div>
            <span>‰∫àÊ∏¨ÂÄ§ (‰ø°È†ºÂ∫¶: {tomorrowPrediction.confidence}%)</span>
          </div>
        )}
      </div>
    </div>
  );
};

export default PerformanceChart; 